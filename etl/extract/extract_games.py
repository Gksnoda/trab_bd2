"""
Script de Extra√ß√£o de Jogos/Categorias - Twitch API
Busca jogos populares e categorias espec√≠ficas
"""

import sys
import os
import json
from datetime import datetime
from typing import List, Dict, Optional

# Adicionar path para imports
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))
from etl.utils.logger import info, error

# Imports dos m√≥dulos de configura√ß√£o
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'config'))
from twitch_client import TwitchAPIClient
from settings import ETLConfig

class GameExtractor:
    """Extrator de dados de jogos/categorias do Twitch"""
    
    def __init__(self):
        """Inicializa o extrator"""
        self.client = TwitchAPIClient()
        self.extracted_data = []
        self.data_dir = self._ensure_data_dir()
    
    def _ensure_data_dir(self) -> str:
        """Garante que o diret√≥rio de dados existe"""
        data_dir = os.path.join(ETLConfig.BASE_DIR, 'data')
        if not os.path.exists(data_dir):
            os.makedirs(data_dir)
            info("üìÅ Diret√≥rio de dados criado: {}", data_dir)
        return data_dir
    
    def extract_top_games(self, limit: int = 100) -> List[Dict]:
        """
        Extrai jogos mais populares do Twitch
        
        Args:
            limit: N√∫mero m√°ximo de jogos para extrair
            
        Returns:
            Lista de dados de jogos
        """
        info("üèÜ Extraindo top {} jogos mais populares...", limit)
        
        try:
            games = []
            extracted = 0
            pagination_cursor = None
            
            while extracted < limit:
                # Calcular quantos buscar nesta itera√ß√£o
                batch_size = min(100, limit - extracted)  # API limita a 100
                
                info("üì¶ Buscando lote: {} jogos (total: {}/{})", 
                     batch_size, extracted, limit)
                
                # Buscar jogos populares
                batch_games = self.client.get_top_games(limit=batch_size)
                
                if not batch_games:
                    info("‚ÑπÔ∏è Nenhum jogo retornado, finalizando")
                    break
                
                games.extend(batch_games)
                extracted += len(batch_games)
                
                # Se retornou menos que o solicitado, provavelmente acabaram
                if len(batch_games) < batch_size:
                    info("‚ÑπÔ∏è Menos jogos retornados que solicitado, finalizando")
                    break
            
            self.extracted_data.extend(games)
            info("‚úÖ {} jogos populares extra√≠dos", len(games))
            return games
            
        except Exception as e:
            error("üí• Erro ao extrair jogos populares: {}", e)
            return []
    
    def extract_specific_games(self, game_names: List[str]) -> List[Dict]:
        """
        Extrai jogos espec√≠ficos por nome
        
        Args:
            game_names: Lista de nomes de jogos para buscar
            
        Returns:
            Lista de dados de jogos
        """
        info("üéØ Extraindo jogos espec√≠ficos: {}", game_names)
        
        try:
            games = []
            
            # API limita a 100 nomes por request
            batch_size = 100
            for i in range(0, len(game_names), batch_size):
                batch_names = game_names[i:i + batch_size]
                info("üì¶ Processando lote {}/{} ({} jogos)", 
                     i//batch_size + 1, 
                     (len(game_names) + batch_size - 1)//batch_size, 
                     len(batch_names))
                
                batch_games = self.client.get_games(names=batch_names)
                games.extend(batch_games)
            
            self.extracted_data.extend(games)
            info("‚úÖ {} jogos espec√≠ficos extra√≠dos", len(games))
            return games
            
        except Exception as e:
            error("üí• Erro ao extrair jogos espec√≠ficos: {}", e)
            return []
    
    def extract_games_from_streams(self, limit: int = 200) -> List[Dict]:
        """
        Extrai jogos baseado nas streams ativas
        
        Args:
            limit: N√∫mero de streams para analisar
            
        Returns:
            Lista de dados de jogos √∫nicos
        """
        info("üì∫ Extraindo jogos das streams ativas...")
        
        try:
            # Buscar streams ativas
            streams = self.client.get_streams(limit=limit)
            
            if not streams:
                error("‚ö†Ô∏è Nenhuma stream encontrada")
                return []
            
            # Extrair game_ids √∫nicos das streams
            game_ids = list(set([
                stream['game_id'] 
                for stream in streams 
                if stream.get('game_id')
            ]))
            
            info("üéÆ {} jogos √∫nicos encontrados nas streams", len(game_ids))
            
            if not game_ids:
                error("‚ö†Ô∏è Nenhum game_id encontrado nas streams")
                return []
            
            # Buscar dados completos dos jogos
            games = []
            batch_size = 100  # API Twitch limita a 100 por request
            
            for i in range(0, len(game_ids), batch_size):
                batch_ids = game_ids[i:i + batch_size]
                info("üì¶ Processando lote {}/{} ({} jogos)", 
                     i//batch_size + 1, 
                     (len(game_ids) + batch_size - 1)//batch_size, 
                     len(batch_ids))
                
                batch_games = self.client.get_games(ids=batch_ids)
                games.extend(batch_games)
            
            self.extracted_data.extend(games)
            info("‚úÖ {} jogos das streams extra√≠dos", len(games))
            return games
            
        except Exception as e:
            error("üí• Erro ao extrair jogos das streams: {}", e)
            return []

    # === NOVO M√âTODO COM PAGINA√á√ÉO ===
    
    def extract_games_from_streams_with_pagination(self, limit: int = 1000) -> List[Dict]:
        """
        Extrai jogos baseado nas streams ativas COM PAGINA√á√ÉO
        
        Args:
            limit: N√∫mero de streams para analisar
            
        Returns:
            Lista de dados de jogos √∫nicos
        """
        info("üì∫ Extraindo jogos das streams ativas COM PAGINA√á√ÉO (at√© {} streams)...", limit)
        
        try:
            # Buscar streams ativas COM PAGINA√á√ÉO
            streams = self.client.get_streams(
                limit=limit, 
                use_pagination=True, 
                max_pages=20  # M√°ximo 20 p√°ginas
            )
            
            if not streams:
                error("‚ö†Ô∏è Nenhuma stream encontrada")
                return []
            
            info("üìä {} streams analisadas para extrair jogos", len(streams))
            
            # Extrair game_ids √∫nicos das streams
            game_ids = list(set([
                stream['game_id'] 
                for stream in streams 
                if stream.get('game_id')
            ]))
            
            info("üéÆ {} jogos √∫nicos encontrados nas streams", len(game_ids))
            
            if not game_ids:
                error("‚ö†Ô∏è Nenhum game_id encontrado nas streams")
                return []
            
            # Buscar dados completos dos jogos
            games = []
            batch_size = 100  # API Twitch limita a 100 por request
            
            for i in range(0, len(game_ids), batch_size):
                batch_ids = game_ids[i:i + batch_size]
                info("üì¶ Processando lote {}/{} ({} jogos)", 
                     i//batch_size + 1, 
                     (len(game_ids) + batch_size - 1)//batch_size, 
                     len(batch_ids))
                
                batch_games = self.client.get_games(ids=batch_ids)
                games.extend(batch_games)
                
                # Log dos jogos encontrados neste lote
                for game in batch_games[:3]:  # Primeiros 3 de cada lote
                    info("üéÆ {}", game.get('name', 'Desconhecido'))
            
            self.extracted_data.extend(games)
            info("‚úÖ {} jogos das streams extra√≠dos com pagina√ß√£o", len(games))
            
            # Estat√≠sticas dos jogos mais populares (por apari√ß√µes em streams)
            game_popularity = {}
            for stream in streams:
                game_id = stream.get('game_id')
                if game_id:
                    game_popularity[game_id] = game_popularity.get(game_id, 0) + 1
            
            # Top 10 jogos mais populares
            top_popular = sorted(game_popularity.items(), key=lambda x: x[1], reverse=True)[:10]
            info("üìä Top 10 jogos mais populares (por streams):")
            for game_id, count in top_popular:
                game_name = next((g['name'] for g in games if g['id'] == game_id), 'Desconhecido')
                info("üèÜ {}: {} streams", game_name, count)
            
            return games
            
        except Exception as e:
            error("üí• Erro ao extrair jogos das streams com pagina√ß√£o: {}", e)
            return []
    
    def save_to_file(self, filename: Optional[str] = None) -> str:
        """
        Salva dados extra√≠dos em arquivo JSON
        
        Args:
            filename: Nome do arquivo (opcional)
            
        Returns:
            Caminho do arquivo salvo
        """
        if not self.extracted_data:
            error("‚ö†Ô∏è Nenhum dado para salvar")
            return ""
        
        if not filename:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"games_extracted_{timestamp}.json"
        
        filepath = os.path.join(self.data_dir, filename)
        
        try:
            # Remover duplicatas por ID
            unique_games = {}
            for game in self.extracted_data:
                unique_games[game['id']] = game
            
            final_data = {
                'extraction_timestamp': datetime.now().isoformat(),
                'total_games': len(unique_games),
                'games': list(unique_games.values())
            }
            
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(final_data, f, indent=2, ensure_ascii=False)
            
            info("üíæ Dados salvos em: {}", filepath)
            info("üìä Total de jogos √∫nicos: {}", len(unique_games))
            return filepath
            
        except Exception as e:
            error("üí• Erro ao salvar arquivo: {}", e)
            return ""
    
    def get_extraction_summary(self) -> Dict:
        """
        Retorna resumo da extra√ß√£o
        
        Returns:
            Dicion√°rio com estat√≠sticas
        """
        if not self.extracted_data:
            return {'total': 0, 'unique': 0}
        
        unique_ids = set(game['id'] for game in self.extracted_data)
        
        # Top jogos por nome
        game_names = [game['name'] for game in self.extracted_data[:10]]
        
        return {
            'total_extracted': len(self.extracted_data),
            'unique_games': len(unique_ids),
            'top_games': game_names,
            'has_box_art': sum(1 for game in self.extracted_data if game.get('box_art_url'))
        }

def main():
    """Fun√ß√£o principal de extra√ß√£o"""
    info("üöÄ === INICIANDO EXTRA√á√ÉO DE JOGOS ===")
    
    extractor = GameExtractor()
    
    try:
        # 1. Extrair jogos populares (AUMENTADO)
        info("üìù Etapa 1: Top jogos populares (AUMENTADO)")
        top_games = extractor.extract_top_games(limit=300)  # Aumentado de 100 para 300
        
        # 2. Extrair jogos espec√≠ficos conhecidos (EXPANDIDO)
        info("üìù Etapa 2: Jogos espec√≠ficos (EXPANDIDO)")
        known_games = [
            'League of Legends', 'Fortnite', 'Valorant', 'Counter-Strike 2',
            'Grand Theft Auto V', 'Minecraft', 'Apex Legends', 'Call of Duty: Warzone',
            'World of Warcraft', 'Dota 2', 'Overwatch 2', 'Rocket League',
            'Among Us', 'Fall Guys', 'Dead by Daylight', 'PUBG: BATTLEGROUNDS',
            'Genshin Impact', 'Lost Ark', 'Escape from Tarkov', 'FIFA 24',
            'Rainbow Six Siege', 'Destiny 2', 'New World', 'Cyberpunk 2077',
            'The Witcher 3', 'Baldur\'s Gate 3', 'Starfield', 'Diablo IV',
            'Street Fighter 6', 'Mortal Kombat 1', 'Spider-Man 2', 'Hogwarts Legacy',
            'Palworld', 'Helldivers 2', 'The Finals', 'Lethal Company'
        ]
        specific_games = extractor.extract_specific_games(known_games)
        
        # 3. Extrair jogos das streams ativas (COM PAGINA√á√ÉO)
        info("üìù Etapa 3: Jogos das streams ativas (COM PAGINA√á√ÉO)")
        stream_games = extractor.extract_games_from_streams_with_pagination(limit=1000)  # Aumentado para 1000
        
        # 4. Salvar dados
        info("üìù Etapa 4: Salvando dados")
        filepath = extractor.save_to_file()
        
        # 5. Resumo final
        summary = extractor.get_extraction_summary()
        info("üìä === RESUMO DA EXTRA√á√ÉO ===")
        info("Total extra√≠do: {}", summary['total_extracted'])
        info("Jogos √∫nicos: {}", summary['unique_games'])
        info("Com box art: {}", summary['has_box_art'])
        info("Top jogos: {}", ', '.join(summary['top_games'][:5]))
        
        if filepath:
            info("‚úÖ Extra√ß√£o de jogos conclu√≠da com sucesso!")
            info("üìÅ Arquivo salvo: {}", filepath)
        else:
            error("‚ùå Falha ao salvar dados")
            
    except Exception as e:
        error("üí• Erro na extra√ß√£o: {}", e)

if __name__ == "__main__":
    main() 