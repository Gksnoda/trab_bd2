import subprocess
import time
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from logger import info, error

def run_script(script_name, description):
    """
    Executa um script Python usando subprocess
    
    Args:
        script_name (str): Nome do arquivo do script
        description (str): Descri√ß√£o do que o script faz
        
    Returns:
        tuple: (success: bool, duration: float, error_msg: str)
    """
    start_time = time.time()
    
    try:
        # Executar o script usando uv run
        result = subprocess.run(
            ["uv", "run", script_name],
            cwd=os.path.dirname(os.path.abspath(__file__)),
            capture_output=True,
            text=True,
            timeout=1800  # Timeout de 30 minutos por script
        )
        
        duration = time.time() - start_time
        
        if result.returncode == 0:
            return True, duration, ""
        else:
            return False, duration, result.stderr or result.stdout
            
    except subprocess.TimeoutExpired:
        duration = time.time() - start_time
        return False, duration, "Script excedeu o timeout de 30 minutos"
        
    except Exception as e:
        duration = time.time() - start_time
        return False, duration, str(e)

def run_all_extractions():
    """
    Executa todos os scripts de extra√ß√£o em sequ√™ncia
    """
    start_time = time.time()
    
    info("=" * 60)
    info("INICIANDO PROCESSO COMPLETO DE EXTRA√á√ÉO")
    info("=" * 60)
    
    # Lista de extra√ß√µes para executar (ordem √© importante!)
    extractions = [
        ("streams.py", "Extra√ß√£o de streams da Twitch"),
        ("users.py", "Extra√ß√£o de dados dos usu√°rios"),
        ("videos.py", "Extra√ß√£o de v√≠deos dos usu√°rios"),
        ("clips.py", "Extra√ß√£o de clips dos usu√°rios"),
        ("games.py", "Extra√ß√£o de dados dos games")
    ]
    
    successful_extractions = []
    failed_extractions = []
    
    for i, (script_name, description) in enumerate(extractions, 1):
        info("")
        info(f"ETAPA {i}/5: {script_name.upper().replace('.PY', '')}")
        info(f"Descri√ß√£o: {description}")
        info("-" * 50)
        
        # Executar o script
        success, duration, error_msg = run_script(script_name, description)
        
        if success:
            successful_extractions.append((script_name, duration))
            info(f"‚úÖ {script_name} conclu√≠do com sucesso em {duration:.1f}s")
        else:
            failed_extractions.append((script_name, error_msg))
            error(f"‚ùå Erro na execu√ß√£o de {script_name}:")
            error(f"Tempo at√© o erro: {duration:.1f}s")
            if error_msg:
                error(f"Mensagem de erro: {error_msg}")
            
            # Continuar com as pr√≥ximas extra√ß√µes mesmo se uma falhar
            info(f"Continuando com as pr√≥ximas extra√ß√µes...")
    
    # Relat√≥rio final
    total_time = time.time() - start_time
    
    info("")
    info("=" * 60)
    info("RELAT√ìRIO FINAL DE EXTRA√á√ÉO")
    info("=" * 60)
    
    if successful_extractions:
        info("‚úÖ EXTRA√á√ïES CONCLU√çDAS COM SUCESSO:")
        for script_name, duration in successful_extractions:
            info(f"   ‚Ä¢ {script_name}: {duration:.1f}s")
    
    if failed_extractions:
        info("")
        error("‚ùå EXTRA√á√ïES COM ERRO:")
        for script_name, error_msg in failed_extractions:
            error(f"   ‚Ä¢ {script_name}: {error_msg[:100]}{'...' if len(error_msg) > 100 else ''}")
    
    info("")
    info(f"TEMPO TOTAL: {total_time:.1f}s")
    if len(successful_extractions) == len(extractions):
        info("üéâ TODAS AS EXTRA√á√ïES FORAM CONCLU√çDAS COM SUCESSO!")
    else:
        info("‚ö†Ô∏è  Algumas extra√ß√µes falharam. Verifique os logs acima.")
    
    info("=" * 60)
    
    return len(successful_extractions) == len(extractions)

def main():
    """
    Fun√ß√£o principal para executar todas as extra√ß√µes
    """
    try:
        # Verificar se estamos no diret√≥rio correto
        current_dir = os.path.basename(os.getcwd())
        if current_dir != "extract":
            error("Este script deve ser executado do diret√≥rio ETL/extract/")
            return False
        
        # Executar todas as extra√ß√µes
        success = run_all_extractions()
        
        return success
        
    except KeyboardInterrupt:
        error("")
        error("‚ùå Processo interrompido pelo usu√°rio (Ctrl+C)")
        error("Algumas extra√ß√µes podem n√£o ter sido conclu√≠das.")
        return False
        
    except Exception as e:
        error(f"‚ùå Erro fatal no processo de extra√ß√£o: {str(e)}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 